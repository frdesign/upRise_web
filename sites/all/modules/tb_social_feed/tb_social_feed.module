<?php

function tb_social_feed_menu() {
  $items = array();

  $items['admin/config/feed'] = array(
    'title' => 'Feed',
    'description' => 'Tools that enhance feed.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'weight' => -15,
  );

  $items ['admin/config/feed/tb_social_feed'] = array(
    'title' => 'TB Social Feed',
    'description' => t('Configure TB Social Feed Module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tb_social_feed_admin_settings'),
    'access arguments' => array('administer modules'),
  );
  return $items;
}

function tb_social_feed_admin_settings($form) {
  $form['tb_social_feed'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => - 10,
    '#default_tab' => variable_get('tb_social_feed__active_tab'),
  );
  $services = tb_social_feed_get_services();
  $array_names = array();
  foreach ($services as $service) {
    module_load_include('inc', 'tb_social_feed', $service->inc);
    $class_name = $service->class;
    $feed_object = new $class_name();
    $service_form = array(
      '#type' => 'fieldset',
      '#title' => $service->title,
      '#collapsible' => TRUE,
      '#collapsed' => !$service->enabled,
    );
    $array_names[] = $service->service;
    $feed_object->createServiceForm($service, $service_form);
    $form['tb_social_feed'][$service->service . "_wrapper"] = $service_form;
  }

  $form['tb_social_feed']['tb_social_feed_services'] = array('#type' => 'hidden', '#value' => implode(" ", $array_names));
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['tb_social_feed_manually'] = array(
    '#type' => 'hidden',
    '#value' => 0,
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  $form['actions']['feed_now'] = array(
    '#markup' => '<input type="submit" value="' . t('Save & Feed') . '" class="form-submit" onclick="return Drupal.TBFeed.saveAndFeed();">',
  );
  return $form;
}

function tb_social_feed_admin_settings_submit($form, $form_state) {
  $input = $form_state['input'];
  variable_set('tb_social_feed__active_tab', $input['tb_social_feed__active_tab']);
  $feed_services = tb_social_feed_get_services();
  foreach ($feed_services as $key => $service) {
    $service_fields = array();
    $service_fields['enabled'] = isset($input[$service->service . '_enable']) && $input[$service->service . '_enable'] ? 1 : 0;
    $service_fields['auto_feed'] = isset($input[$service->service . '_auto_feed']) && $input[$service->service . '_auto_feed'] ? 1 : 0;
    $service_fields['feed_limit'] = isset($input[$service->service . '_feed_limit']) ? intval($input[$service->service . '_feed_limit']) : 0;
    $service_fields['app_info'] = isset($input[$service->service . '_app_info']) ? serialize($input[$service->service . '_app_info']) : serialize(array());
    $service_fields['changed'] = mktime();
    $number_accounts = 0;
    $configs = array();
    $configs['feed_limit'] = $service_fields['feed_limit'];
    $configs['auto_feed'] = $service_fields['auto_feed'];
    $configs['app_info'] = unserialize($service_fields['app_info']);
    if (isset($input[$service->service . '_enable']) && $input[$service->service . '_enable']) {
      if (isset($input[$service->service . '_feed_account']) && is_array($input[$service->service . '_feed_account'])) {
        $accounts = $input[$service->service . '_feed_account'];
        $current_accounts = $input[$service->service . '_feed_current_account'];
        $account_name = $input[$service->service . '_feed_account_name'];

        db_update('tb_social_feed_accounts')
          ->fields(array('deleted' => 1))
          ->condition('service', $service->service)
          ->execute();

        foreach ($current_accounts as $weight => $current_account) {
          $current_account = trim($current_account);
          $account = trim($accounts[$weight]);
          if (!empty($current_account) || !empty($account)) {
            $acc = db_select('tb_social_feed_accounts', 'a')
              ->fields('a')
              ->condition('account', $current_account)
              ->condition('service', $service->service)
              ->execute()
              ->fetchObject();
            $number_accounts++;
            if ($acc) {
              $fields = array();
              $fields['weight'] = $weight;
              $fields['account_name'] = $account_name[$weight];
              $fields['changed'] = mktime();
              $fields['deleted'] = 0;
              $fields['account'] = $account;
              db_update('tb_social_feed_accounts')
                ->fields($fields)
                ->condition('account', $current_account)
                ->condition('service', $service->service)
                ->execute();
            }
            else {
              $fields = array();
              $fields['account'] = $account;
              $fields['account_name'] = $account_name[$weight];
              $fields['service'] = $service->service;
              $fields['weight'] = $weight;
              $fields['deleted'] = 0;
              $fields['enabled'] = 1;
              $fields['auto_feed'] = intval($input[$service->service . "_auto_feed"]);
              $fields['feed_limit'] = intval($input[$service->service . "_feed_limit"]);
              $fields['latest_feed'] = 0;
              $fields['created'] = mktime();
              $fields['changed'] = mktime();
              $results = db_insert('tb_social_feed_accounts')
                ->fields($fields)
                ->execute();
            }
          }
        }
      }
      else {
        $number_accounts = -1;
      }
    }
    $service_fields['number_accounts'] = $number_accounts;
    db_update('tb_social_feed_services')
      ->fields($service_fields)
      ->condition('service', $service->service)
      ->execute();
  }
  db_delete('tb_social_feed_accounts')->condition('deleted', 1)->execute();
  if ($input['tb_social_feed_manually']) {
    tb_social_feed_manual();
    drupal_set_message(t('Saved & Feeded'));
  }
  else {
    drupal_set_message(t('Saved'));
  }
}

function tb_social_feed_manual() {
  $feed_services = tb_social_feed_get_services();
  foreach ($feed_services as $key => $service) {
    if ($service->enabled) {
      $configs = array();
      $configs['feed_limit'] = $service->feed_limit;
      $configs['app_info'] = unserialize($service->app_info);
      $class_name = $service->class;
      if ($service->enabled && class_exists($class_name)) {
        if ($service->number_accounts >= 0) {
          $accounts = db_select('tb_social_feed_accounts', 'a')
            ->fields('a')
            ->condition('service', $service->service)
            ->execute()
            ->fetchAll();
          foreach ($accounts as $account) {
            $configs['account'] = $account->account;
            $feed = new $class_name($configs);
            $results = $feed->feed();
          }
        }
        else {
          $feed = new $class_name($configs);
          $results = $feed->feed();
        }
      }
    }
  }
}

function tb_social_feed_cron() {
  $feed_services = tb_social_feed_get_services();
  foreach ($feed_services as $key => $service) {
    if ($service->enabled && $service->auto_feed) {
      $configs = array();
      $configs['feed_limit'] = $service->feed_limit;
      $configs['app_info'] = unserialize($service->app_info);
      $class_name = $service->class;
      if ($service->enabled && class_exists($class_name)) {
        if ($service->number_accounts >= 0) {
          $accounts = db_select('tb_social_feed_accounts', 'a')
            ->fields('a')
            ->condition('service', $service->service)
            ->execute()
            ->fetchAll();
          foreach ($accounts as $account) {
            $configs['account'] = $account->account;
            $feed = new $class_name($configs);
            $results = $feed->feed();
          }
        }
        else {
          $feed = new $class_name($configs);
          $results = $feed->feed();
        }
      }
    }
  }
}

function tb_social_feed_get_services() {
  $services = db_select('tb_social_feed_services', 's')
    ->fields('s')
    ->condition('type', 'tb_social_feed')
    ->execute()
    ->fetchAll();
  if (empty($services)) {
    $services = tb_social_feed_default_sevices();
    foreach ($services as $name => $service) {
      $service['service'] = $name;
      $service['created'] = mktime();
      $service['changed'] = mktime();
      db_insert('tb_social_feed_services')->fields($service)->execute();
    }
    $services = db_select('tb_social_feed_services', 's')->fields('s')->condition('type', 'tb_social_feed')->execute()->fetchAll();
  }
  return $services;
}

//drupal_get_path('module', 'tb_feed')
function tb_social_feed_default_sevices() {
  return array(
    'facebook' => array(
      'title' => 'Facebook',
      'type' => 'tb_social_feed',
      'class' => 'TBFacebookFeed',
      'inc' => 'includes/facebook',
      'enabled' => 0,
      'auto_feed' => 1,
      'feed_limit' => 10,
      'number_accounts' => 0,
    ),
    'twitter' => array(
      'title' => 'Twitter',
      'type' => 'tb_social_feed',
      'class' => 'TBTwitterFeed',
      'inc' => 'includes/twitter',
      'enabled' => 0,
      'auto_feed' => 1,
      'feed_limit' => 10,
      'number_accounts' => 0,
    ),
    'instagram' => array(
      'title' => 'Instagram',
      'type' => 'tb_social_feed',
      'class' => 'TBInstagramFeed',
      'inc' => 'includes/instagram',
      'enabled' => 0,
      'auto_feed' => 1,
      'feed_limit' => 10,
      'number_accounts' => 0,
    ),
    'flickr' => array(
      'title' => 'Flickr',
      'type' => 'tb_social_feed',
      'class' => 'TBFlickrFeed',
      'inc' => 'includes/flickr',
      'enabled' => 0,
      'auto_feed' => 1,
      'feed_limit' => 10,
      'number_accounts' => 0,
    ),
    'youtube' => array(
      'title' => 'Youtube',
      'type' => 'tb_social_feed',
      'class' => 'TBYoutubeFeed',
      'inc' => 'includes/youtube',
      'enabled' => 0,
      'auto_feed' => 1,
      'feed_limit' => 10,
      'number_accounts' => 0,
    ),
    'vimeo' => array(
      'title' => 'Vimeo',
      'type' => 'tb_social_feed',
      'class' => 'TBVimeoFeed',
      'inc' => 'includes/vimeo',
      'enabled' => 0,
      'auto_feed' => 1,
      'feed_limit' => 10,
      'number_accounts' => 0,
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function tb_social_feed_node_info() {
  return array(
    'tb_social_feed' => array(
      'name' => t('Social feed'),
      'base' => 'node_content',
      'description' => t('Social feed.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'disabled' => 0,
      'comment' => '1',
      'node_options' => array(
        'status' => true,
        'promote' => false,
        'sticky' => false,
      ),
    ),
  );
}

