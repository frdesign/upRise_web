<?php

function tb_theme_feed_all_vocabularies() {
  $vocabularies = function_exists('tb_wall_layout_vocabularies') ? tb_wall_layout_vocabularies() : array();
  $vocabularies += tb_theme_feed_vocabularies();
  return $vocabularies;
}

function tb_theme_feed_install() {
  $query = Database::getConnection()->prefixTables('
    ALTER TABLE `{tb_theme_feed_contents}` 
    ADD FOREIGN KEY ( `node_id` ) 
    REFERENCES `{node}` (`nid`) 
    ON DELETE CASCADE ON UPDATE NO ACTION ;');
  db_query($query);
  node_types_rebuild();
  $content_types = node_type_get_types();
  $machine_name = 'tb_theme_feed';
  $content_type = node_type_get_type($machine_name);
  node_type_save($content_type);
  node_add_body_field($content_type);

  if (!field_info_field('field_image')) {
    $field = array(
      'field_name' => 'field_image',
      'type' => 'image',
      'cardinality' => 1,
      'locked' => FALSE,
      'indexes' => array('fid' => array('fid')),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => FALSE,
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
      ),
    );
    field_create_field($field);
  }
  if (!field_info_instance('node', 'field_image', $machine_name)) {
    $instance = array(
      'field_name' => 'field_image',
      'entity_type' => 'node',
      'label' => 'Image',
      'bundle' => $machine_name,
      'description' => t('Image field.'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'field/' . $machine_name,
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'alt_field' => TRUE,
        'title_field' => '',
      ),
      'widget' => array(
        'type' => 'image_image',
        'settings' => array(
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail',
        ),
        'weight' => 20,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'large', 'image_link' => ''),
          'weight' => -1,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => image_style_load('tb-wall-dynamic-style') ? 'tb-wall-dynamic-style' : 'medium', 'image_link' => 'content'),
          'weight' => -1,
        ),
      ),
    );
    field_create_instance($instance);
  }
  if (!field_info_field('field_reference_url')) {
    $field = array(
      'field_name' => 'field_reference_url',
      'type' => 'link_field',
      'cardinality' => 1,
      'locked' => FALSE,
      'indexes' => array(),
      'settings' => array(
        'attributes' => _link_default_attributes(),
        'url' => 0,
        'title' => 'optional',
        'title_value' => '',
        'title_maxlength' => 128,
        'enable_tokens' => 1,
        'display' => array(
          'url_cutoff' => 80,
        ),
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
      ),
    );
    field_create_field($field);
  }
  if (!field_info_instance('node', 'field_reference_url', $machine_name)) {
    $instance = array(
      'field_name' => 'field_reference_url',
      'entity_type' => 'node',
      'label' => 'Reference Source',
      'bundle' => $machine_name,
      'description' => t('Reference Source field.'),
      'required' => TRUE,
      'settings' => array(
        'attributes' => array(
          'target' => LINK_TARGET_NEW_WINDOW,
          'class' => '',
          'rel' => '',
        ),
        'url' => 0,
        'title' => 'optional',
        'title_value' => '',
        'title_maxlength' => 128, // patch #1307788 from nmc
        'enable_tokens' => 1,
        'display' => array(
          'url_cutoff' => 80,
        ),
        'validate_url' => 1,
      ),
      'widget' => array(
        'type' => 'link_field',
        'settings' => array('attributes' => array('target' => '_blank')),
        'weight' => 21,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'link_label',
          'weight' => 999,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'link_label',
          'weight' => 999,
        ),
      ),
    );
    field_create_instance($instance);
  }

  $vocabularies = tb_theme_feed_all_vocabularies();
  foreach ($vocabularies as $machine_name => $info) {
    $vocabulary = taxonomy_vocabulary_load(variable_get($machine_name, 0));
    if (!$vocabulary) {
      $edit = array(
        'name' => $info['title'],
        'machine_name' => $machine_name,
        'description' => $info['description'],
        'hierarchy' => 1,
        'module' => 'tb_theme_feed_module',
        'weight' => 50,
      );
      $vocabulary = (object) $edit;
      taxonomy_vocabulary_save($vocabulary);
      variable_set($machine_name, $vocabulary->vid);

      foreach ($info['terms'] as $term => $description) {
        $term_info = array(
          'name' => $term,
          'description' => $description,
          'vid' => $vocabulary->vid,
        );
        $term_object = (object) $term_info;
        taxonomy_term_save($term_object);
      }
      if (!field_info_field($info['field']['name'])) {
        $field = array(
          'field_name' => $info['field']['name'],
          'type' => 'taxonomy_term_reference',
          'cardinality' => 1,
          'settings' => array(
            'cardinality' => -1,
            'allowed_values' => array(
              array(
                'vocabulary' => $vocabulary->machine_name,
                'parent' => 0,
              ),
            ),
          ),
        );
        field_create_field($field);
      }
    }
    foreach ($content_types as $bundle => $content_type) {
      $bundles = $info['bundles'];
      if ((isset($bundles['in']) && !in_array($bundle, $bundles['in'])) ||
        (isset($bundles['except']) && in_array($bundle, $bundles['except']))) {
        continue;
      }
      if (!field_info_instance('node', $info['field']['name'], $bundle)) {
        $instance = array(
          'field_name' => $info['field']['name'],
          'entity_type' => 'node',
          'label' => $vocabulary->name,
          'bundle' => $bundle,
          'required' => FALSE,
          'widget' => array(
            'type' => 'options_select',
            'weiht' => $info['field']['weight'],
          ),
          'display' => array(
            'default' => array(
              'type' => 'hidden',
              'weight' => 10,
            ),
            'teaser' => array(
              'type' => 'hidden',
              'weight' => 10,
            ),
          ),
        );
        field_create_instance($instance);
      }
    }
  }
}

function tb_theme_feed_uninstall() {
  $vocabularies = tb_theme_feed_vocabularies();
  foreach ($vocabularies as $machine_name => $info) {
    $vocabulary = taxonomy_vocabulary_load(variable_get($machine_name, 0));
    if ($vocabulary) {
      taxonomy_vocabulary_delete($vocabulary->vid);
      variable_del($machine_name);
    }
    if (field_info_field($info['field']['name'])) {
      field_delete_field($info['field']['name']);
    }
  }

  node_type_delete('tb_theme_feed');
}

/**
 * Implements hook_schema().
 */
function tb_theme_feed_schema() {
  $schema = array();
  $schema['tb_theme_feed_services'] = array(
    'description' => 'Stores TB Feed configurations.',
    'fields' => array(
      'service' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique config name.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Type of feed.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Title of feed.',
      ),
      'app_info' => array(
        'type' => 'text',
        'description' => 'Application information.'
      ),
      'class' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique config name.',
      ),
      'inc' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique config name.',
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'If this service was enabled.',
      ),
      'auto_feed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'If this service was set auto feed.',
      ),
      'feed_limit' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Maximum row feed per action.',
      ),
      'number_accounts' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Number account if this service was anabled.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was last edited, as a Unix timestamp.',
      ),
    ),
    'primary key' => array('service'),
    'indexes' => array(
      'changed' => array('changed'),
      'created' => array('created'),
    ),
  );

  $schema['tb_theme_feed_accounts'] = array(
    'description' => 'Stores TB Feed configurations.',
    'fields' => array(
      'account' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Account name.',
      ),
      'account_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'Account name.',
      ),
      'service' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Service name.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Weight of account.',
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'If this account was enabled.',
      ),
      'deleted' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'If this account was deleted.',
      ),
      'auto_feed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'If this service was set auto feed.',
      ),
      'feed_limit' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Maximum row feed per action.',
      ),
      'latest_feed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was created, as a Unix timestamp.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was last edited, as a Unix timestamp.',
      ),
    ),
    'primary key' => array('account', 'service'),
    'indexes' => array(
      'changed' => array('changed'),
      'created' => array('created'),
      'latest_feed' => array('latest_feed'),
    ),
  );

  $schema['tb_theme_feed_contents'] = array(
    'description' => 'Stores TB Feed data.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Primary Key: Key of feed data.',
      ),
      'feed_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'ID of feed data.',
      ),
      'node_id' => array(
        'type' => 'int',
        'length' => 10,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'ID of related node.',
      ),
      'account' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Feed account.',
      ),
      'service' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Feed account.',
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Feed URL.',
      ),
      'reference_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'URL of feed detail.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Feed data row.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the config was last edited, as a Unix timestamp.',
      ),
      'latest_feed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the content was feed, as a Unix timestamp.',
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'feed_id' => array('feed_id'),
      'node_id' => array('node_id'),
      'account' => array('account'),
      'service' => array('service'),
      'changed' => array('changed'),
      'created' => array('created'),
      'latest_feed' => array('latest_feed'),
    ),
    'foreign keys' => array(
      'node_foreign_keys' => array(
        'table' => 'node',
        'columns' => array('node_id' => 'nid'),
      ),
    ),
  );

  return $schema;
}

function tb_theme_feed_vocabularies() {
  return array(
    'theme_feed_types' => array(
      'title' => t('Theme Feed Types'),
      'description' => t('Theme Feed types vocabulary'),
      'terms' => array(
        'Fusion' => t("Fusion"),
        'ThemeForest' => t("ThemeForest"),
        'ThemeBrain' => t("ThemeBrain"),
        'Drupal' => t("Drupal"),
      ),
      'field' => array(
        'name' => 'field_theme_feed_types',
        'weight' => 49,
      ),
      'bundles' => array(
        'in' => array('tb_theme_feed')
      ),
    ),
  );
}
